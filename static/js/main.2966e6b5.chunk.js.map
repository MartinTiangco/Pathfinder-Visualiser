{"version":3,"sources":["PathfinderVisualiser/components/Node.js","PathfinderVisualiser/components/Key.js","PathfinderVisualiser/components/InfoModal.js","PathfinderVisualiser/components/TutorialModal.js","PathfinderVisualiser/algorithms/Helpers.js","PathfinderVisualiser/components/Grid.js","PathfinderVisualiser/algorithms/Dijkstra.js","PathfinderVisualiser/algorithms/BFS.js","PathfinderVisualiser/algorithms/DFS.js","PathfinderVisualiser/PathfinderVisualiser.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","isStart","isFinish","isWall","row","col","isKey","keyClass","onMouseDown","onMouseEnter","onMouseUp","classNames","className","id","Component","Key","InfoModal","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","href","title","Footer","Button","onClick","onHide","TutorialModal","sortByDistance","nodes","sort","nodeA","nodeB","distance","collectAllNodes","grid","node","push","updateUnvisited","getUnvisitedNeighbours","forEach","neighbour","lastNode","neighbourNodes","isVisited","length","Grid","initialiseSize","colSize","rowSize","width","window","innerWidth","Math","floor","height","innerHeight","createInitialGrid","setState","handleDijkstra","isRunning","canReset","state","startNodeCoords","finishNodeCoords","startNode","finishNode","visitedNodes","unvisitedNodes","closestNode","shift","Infinity","Dijkstra","showAnimation","handleBFS","BFS","handleDFS","currentNode","pop","concat","DFS","i","setTimeout","getPath","document","getElementById","classList","add","shortestPathInOrder","reverse","animatePath","resetNodes","columns","current","childNodes","column","remove","rows","cols","random","isMobile","round","randomiseNodePosition","currentRow","j","createNode","setStartAndFinish","startRow","endRow","startCol","endCol","buildWalls","clearWalls","handleMouseUp","mouseDown","handleMouseEnter","handleMouseDown","start","chosenAlgorithm","algorithmTitle","chooseAlgorithm","name","showAbout","isVisible","aboutShow","showTutorial","tutorialShow","screenWidth","React","createRef","addEventListener","Navbar","sticky","collapseOnSelect","expand","bg","variant","Brand","Nav","NavDropdown","Item","active","Divider","disabled","show","ref","map","rowIdx","key","nodeIdx","withGetScreen","PathfinderVisualiser","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2966e6b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"../css/Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      row,\r\n      col,\r\n      isKey,\r\n      keyClass,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    // Figure out the type of the node\r\n    let classNames = `node`;\r\n    classNames += isStart ? ` node-start` : ``;\r\n    classNames += isFinish ? ` node-finish` : ``;\r\n    classNames += isWall ? ` node-wall` : ``;\r\n\r\n    // Add specific class if the node is part of the Key/Legend\r\n    if (isKey) {\r\n      return <div className={`node-key ${keyClass}`}></div>;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id={`row-${row}-col-${col}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n        className={classNames}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Node from \"./Node\";\r\n\r\nexport default function Key() {\r\n  return (\r\n    <ul className=\"key\">\r\n      <li>\r\n        <Node isKey={true} keyClass=\"node-start-key\"></Node>\r\n        <span className=\"key-align\">Start Node</span>\r\n      </li>\r\n      <li>\r\n        <Node isKey={true} keyClass=\"node-finish-key\"></Node>\r\n        <span className=\"key-align\">Target Node</span>\r\n      </li>\r\n      <li>\r\n        <Node isKey={true}></Node>\r\n        <span className=\"key-align\">Unvisited Node</span>\r\n      </li>\r\n      <li>\r\n        <Node isKey={true} keyClass=\"node-visited-key\"></Node>\r\n        <span className=\"key-align\">Visited Node</span>\r\n      </li>\r\n      <li>\r\n        <Node isKey={true} keyClass=\"node-path-key\"></Node>\r\n        <span className=\"key-align\">Path Node</span>\r\n      </li>\r\n      <li>\r\n        <Node isKey={true} keyClass=\"node-wall-key\"></Node>\r\n        <span className=\"key-align\">Wall Node</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { FiInfo } from \"react-icons/fi\";\r\n\r\nexport default function InfoModal(props) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          <FiInfo className=\"mr-sm-2\" />\r\n          About Pathfinder Visualiser\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>Hey, I'm Martin Tiangco! Thanks for looking at my project!</p>\r\n        <h5>What is this project?</h5>\r\n        <p>\r\n          This project is a visualisation of pathfinding algorithms present in\r\n          many software applications. The pathfinding algorithms in this project\r\n          include Breadth-first Search, Depth-first Search and Dijkstra's\r\n          Algorithm, with more to come in the future. Some practical uses for\r\n          pathfinding algorithms include Google Maps and the internet.\r\n        </p>\r\n        <p>\r\n          I created this project with large inspiration from Clement Mihailescu.\r\n          After watching his videos, I decided to give this a try - here is the\r\n          finished product! I had a lot of fun building it, and I hope you have\r\n          a fun time messing around with it.\r\n        </p>\r\n        <p>\r\n          Here is the{\" \"}\r\n          <a href=\"https://github.com/MartinTiangco/Pathfinder-Visualiser\">\r\n            GitHub link\r\n          </a>{\" \"}\r\n          to the project. To exit this popup, click on 'Close' below or click\r\n          outside of the popup.\r\n        </p>\r\n        <p>\r\n          Also, connect with me on{\" \"}\r\n          <a href=\"https://www.linkedin.com/in/martintiangco/\">LinkedIn!</a>\r\n        </p>\r\n        <p>\r\n          Icons made by{\" \"}\r\n          <a href=\"https://www.flaticon.com/authors/google\" title=\"Google\">\r\n            {\" \"}\r\n            Google{\" \"}\r\n          </a>\r\n          and{\" \"}\r\n          <a href=\"https://icon54.com/\" title=\"Pixel perfect\">\r\n            {\" \"}\r\n            Pixel perfect{\" \"}\r\n          </a>\r\n          from{\" \"}\r\n          <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n            {\" \"}\r\n            www.flaticon.com\r\n          </a>\r\n        </p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { FiHelpCircle } from \"react-icons/fi\";\r\n\r\nexport default function TutorialModal(props) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          <FiHelpCircle className=\"mr-sm-2\" />\r\n          Tutorial\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>\r\n          <b>No tutorial yet!</b>\r\n        </p>\r\n        <p>Stay tuned for later updates!</p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onHide}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","/**\r\n * Sorts the nodes by ascending distance order\r\n */\r\nexport function sortByDistance(nodes) {\r\n  nodes.sort((nodeA, nodeB) => {\r\n    return nodeA.distance - nodeB.distance;\r\n  });\r\n}\r\n\r\n/**\r\n * Collects all nodes in the grid.\r\n */\r\nexport function collectAllNodes(grid) {\r\n  let nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n/**\r\n * Updates neighbouring nodes that are unvisited to have distance of 0 and update their lastNode property to be the current node\r\n */\r\nexport function updateUnvisited(node, grid) {\r\n  // in the grid, we find the node\r\n  // mark the nodes adjacent to it with distance = 1\r\n  const neighbourNodes = getUnvisitedNeighbours(node, grid);\r\n  neighbourNodes.forEach((neighbour) => {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.lastNode = node;\r\n  });\r\n}\r\n\r\n/**\r\n * Get the unvisited neighbours one spot above, below, to the left, right of the current node.\r\n * Return neighbourNodes, an array of nodes that are unvisited\r\n */\r\nexport function getUnvisitedNeighbours(node, grid) {\r\n  let neighbourNodes = [];\r\n  const { row, col } = node;\r\n  // find the unvisited nodes one space away from the node\r\n  if (row - 1 >= 0 && !grid[row - 1][col].isVisited)\r\n    neighbourNodes.push(grid[row - 1][col]);\r\n  if (row + 1 < grid.length && !grid[row + 1][col].isVisited)\r\n    neighbourNodes.push(grid[row + 1][col]);\r\n  if (col - 1 >= 0 && !grid[row][col - 1].isVisited)\r\n    neighbourNodes.push(grid[row][col - 1]);\r\n  if (col + 1 < grid[0].length && !grid[row][col + 1].isVisited)\r\n    neighbourNodes.push(grid[row][col + 1]);\r\n  return neighbourNodes;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { withGetScreen } from \"react-getscreen\";\r\nimport Node from \"./Node\";\r\nimport Key from \"./Key\";\r\nimport InfoModal from \"./InfoModal\";\r\nimport TutorialModal from \"./TutorialModal\";\r\nimport \"../css/Grid.css\";\r\nimport { Dijkstra } from \"../algorithms/Dijkstra\";\r\nimport { BFS } from \"../algorithms/BFS\";\r\nimport { DFS } from \"../algorithms/DFS\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { IoIosBuild } from \"react-icons/io\";\r\nimport { MdBorderClear } from \"react-icons/md\";\r\nimport { FiPlay, FiRefreshCw, FiInfo, FiHelpCircle } from \"react-icons/fi\";\r\n\r\n// Constants\r\nconst START_NODE_COL = 0,\r\n  START_NODE_ROW = 0,\r\n  FINISH_NODE_COL = 1,\r\n  FINISH_NODE_ROW = 1,\r\n  WIDTH_BREAKPOINT = 1150;\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      rowSize: 0,\r\n      colSize: 0,\r\n      startNodeCoords: { row: 0, col: 0 },\r\n      finishNodeCoords: { row: 0, col: 0 },\r\n      mouseDown: false,\r\n      screenWidth: null,\r\n      isRunning: false,\r\n      canReset: true,\r\n      algorithmTitle: \"\",\r\n      aboutShow: false,\r\n      tutorialShow: false,\r\n    };\r\n    this.grid = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", () => {\r\n      this.initialiseSize();\r\n    });\r\n    this.initialiseSize();\r\n  }\r\n\r\n  /**\r\n   * Collects the number of rows and cols depending on where you access the webpage (i.e. on desktop, mobile or tablet).\r\n   */\r\n  initialiseSize = () => {\r\n    let rowSize = 0,\r\n      colSize = 0;\r\n\r\n    // Formula to determine how many columns the grid has\r\n    let width = window.innerWidth;\r\n    colSize = Math.floor((width - 50) / 35);\r\n\r\n    // Formula to determine how many roms the grid has\r\n    let height = window.innerHeight;\r\n    if (width <= WIDTH_BREAKPOINT) {\r\n      rowSize = Math.floor((height - 125) / 35);\r\n    } else {\r\n      rowSize = Math.floor((height - 250) / 35);\r\n    }\r\n\r\n    this.createInitialGrid(rowSize, colSize, true);\r\n    this.setState({\r\n      rowSize,\r\n      colSize,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * This method uses Dijkstra's Algorithm on the grid and shows the process visually.\r\n   */\r\n  handleDijkstra = () => {\r\n    this.setState(\r\n      {\r\n        isRunning: true,\r\n        canReset: false,\r\n      },\r\n      () => {\r\n        const { grid, startNodeCoords, finishNodeCoords } = this.state;\r\n        const startNode = grid[startNodeCoords.row][startNodeCoords.col];\r\n        const finishNode = grid[finishNodeCoords.row][finishNodeCoords.col];\r\n        const visitedNodes = Dijkstra(startNode, finishNode, grid); // returns an array of visited nodes with the shortest path\r\n        this.showAnimation(visitedNodes, finishNode);\r\n      }\r\n    );\r\n  };\r\n\r\n  /**\r\n   * This method uses BFS on the grid and shows the process visually.\r\n   */\r\n  handleBFS = () => {\r\n    this.setState(\r\n      {\r\n        isRunning: true,\r\n        canReset: false,\r\n      },\r\n      () => {\r\n        const { grid, startNodeCoords, finishNodeCoords } = this.state;\r\n        const startNode = grid[startNodeCoords.row][startNodeCoords.col];\r\n        const finishNode = grid[finishNodeCoords.row][finishNodeCoords.col];\r\n        const visitedNodes = BFS(startNode, finishNode, grid); // returns an array of visited nodes with the shortest path\r\n        this.showAnimation(visitedNodes, finishNode);\r\n      }\r\n    );\r\n  };\r\n\r\n  /**\r\n   * This method uses DFS on the grid and shows the process visually.\r\n   */\r\n  handleDFS = () => {\r\n    this.setState(\r\n      {\r\n        isRunning: true,\r\n        canReset: false,\r\n      },\r\n      () => {\r\n        const { grid, startNodeCoords, finishNodeCoords } = this.state;\r\n        const startNode = grid[startNodeCoords.row][startNodeCoords.col];\r\n        const finishNode = grid[finishNodeCoords.row][finishNodeCoords.col];\r\n        const visitedNodes = DFS(startNode, finishNode, grid); // returns an array of visited nodes\r\n        this.showAnimation(visitedNodes, finishNode);\r\n      }\r\n    );\r\n  };\r\n\r\n  /**\r\n   * This method actually handles the animation of Dijkstra by editing the classNames of the nodes that were visited.\r\n   * visitedNodes - array of nodes that were visited, retrieved from Dijkstra's Algorithm\r\n   * finishNode - singular node object that marks the finish\r\n   */\r\n  showAnimation = (visitedNodes, finishNode) => {\r\n    for (let i = 0; i <= visitedNodes.length; i++) {\r\n      // we have completed the loop, now we animate the shortest path\r\n      if (i === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          this.getPath(finishNode);\r\n        }, 30 * i);\r\n        return;\r\n      }\r\n\r\n      // loop through all the visited nodes\r\n      setTimeout(() => {\r\n        const { row, col } = visitedNodes[i];\r\n        // get the node from the HTML dom with the ID\r\n        document\r\n          .getElementById(`row-${row}-col-${col}`)\r\n          .classList.add(\"node-visited\");\r\n      }, 30 * i);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * This method finds the path taken by using the node object's LastVisited property.\r\n   * It begins with the finishNode and backtracks all the way to the startNode. It creates an array from all\r\n   * the nodes from the finishNode to the startNode, then reverses that array.\r\n   * finishNode - singular node object that marks the finish\r\n   */\r\n  getPath = (finishNode) => {\r\n    let shortestPathInOrder = [];\r\n    if (finishNode.isVisited === false) {\r\n      // if finishNode is blocked by walls\r\n      this.setState({ canReset: true });\r\n      return;\r\n    }\r\n    shortestPathInOrder.push(finishNode); // finishNode is first\r\n    let currentNode = finishNode;\r\n\r\n    // Iterate through all the nodes that were visited last until we have reached the startNode.\r\n    // In other words, backtrack from the finishNode to the startNode.\r\n    while (currentNode.lastNode !== null) {\r\n      shortestPathInOrder.push(currentNode.lastNode);\r\n      currentNode = currentNode.lastNode;\r\n    }\r\n    shortestPathInOrder.reverse(); // reverses the array\r\n    this.animatePath(shortestPathInOrder); // animates the shortest path\r\n  };\r\n\r\n  /**\r\n   * Once we have the path we took, we animate it by using the class \"node-path\".\r\n   */\r\n  animatePath = (shortestPathInOrder) => {\r\n    for (let i = 0; i <= shortestPathInOrder.length; i++) {\r\n      if (i === shortestPathInOrder.length) {\r\n        setTimeout(() => {\r\n          this.setState({ canReset: true });\r\n        }, 50 * i);\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        const { row, col } = shortestPathInOrder[i];\r\n        // get the node from the HTML dom with the ID\r\n        document\r\n          .getElementById(`row-${row}-col-${col}`)\r\n          .classList.add(\"node-path\");\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Removes the node-visited and node-path classes of the grid. Restarts the grid with new state\r\n   */\r\n  resetNodes = () => {\r\n    const columns = this.grid.current.childNodes; // get iterable list of columns\r\n    for (const column of columns) {\r\n      // this returns HTML DOM elements with className = \"column\"\r\n      for (const node of column.childNodes) {\r\n        // iterate through the nodes in the DOM tree of the column\r\n        node.classList.remove(`node-path`);\r\n        node.classList.remove(`node-visited`);\r\n      }\r\n    }\r\n\r\n    this.initialiseSize();\r\n    this.setState({\r\n      isRunning: false,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Creates the initial grid at startup and whenever the user clicks the reset button.\r\n   * rows - the number of rows of the grid\r\n   * cols - the number of cols of the grid\r\n   * random (Default = false) - whether or not the startNode and finishNode are decided randomly.\r\n   */\r\n  createInitialGrid = (rows, cols, random = false) => {\r\n    let startNode = { row: START_NODE_ROW, col: START_NODE_COL };\r\n    let finishNode = { row: FINISH_NODE_ROW, col: FINISH_NODE_COL };\r\n\r\n    // randomises the start and finish nodes\r\n    if (random) {\r\n      // In mobile, we pick either the first 3 rows or the last 3 rows to be the startNode and endNode's positions.\r\n      // e.g. startNode can either be on the top or bottom 3 rows - the endNode gets to be in the other end\r\n      // First, we pick either the top or bottom for startNode\r\n      let choice = 0;\r\n      if (this.props.isMobile()) {\r\n        choice = Math.round(Math.random());\r\n        if (choice === 0) {\r\n          startNode = this.randomiseNodePosition(0, 3, 0, cols, startNode); // start will be in the top rows\r\n          finishNode = this.randomiseNodePosition(\r\n            rows - 3,\r\n            rows,\r\n            0,\r\n            cols,\r\n            finishNode\r\n          ); // finish will be in the bottom rows\r\n        } else {\r\n          startNode = this.randomiseNodePosition(\r\n            rows - 3,\r\n            rows,\r\n            0,\r\n            cols,\r\n            startNode\r\n          ); // start will be in the bottom rows\r\n          finishNode = this.randomiseNodePosition(0, 3, 0, cols, finishNode); // finish will be in the far left\r\n        }\r\n      } else {\r\n        // the screen is either desktop or tablet mode\r\n        choice = Math.round(Math.random());\r\n        if (choice === 0) {\r\n          startNode = this.randomiseNodePosition(0, rows, 0, 5, startNode); // start will be in the top rows\r\n          finishNode = this.randomiseNodePosition(\r\n            0,\r\n            rows,\r\n            cols - 5,\r\n            cols,\r\n            finishNode\r\n          ); // finish will be in the bottom rows\r\n        } else {\r\n          startNode = this.randomiseNodePosition(\r\n            0,\r\n            rows,\r\n            cols - 5,\r\n            cols,\r\n            startNode\r\n          ); // start will be in the bottom rows\r\n          finishNode = this.randomiseNodePosition(0, rows, 0, 5, finishNode); // finish will be in the top rows\r\n        }\r\n      }\r\n    }\r\n\r\n    // creates the initial grid\r\n    let grid = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      let currentRow = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        currentRow.push(this.createNode(i, j));\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n\r\n    this.setStartAndFinish(grid, startNode, finishNode);\r\n\r\n    this.setState({\r\n      grid,\r\n      startNodeCoords: { row: startNode.row, col: startNode.col },\r\n      finishNodeCoords: {\r\n        row: finishNode.row,\r\n        col: finishNode.col,\r\n      },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Randomises the position for a node.\r\n   */\r\n  randomiseNodePosition = (startRow, endRow, startCol, endCol, node) => {\r\n    let { row, col } = node;\r\n    // chooses a random row\r\n    const randomRow = Math.floor(Math.random() * (endRow - startRow)) + 1;\r\n    row = endRow - randomRow;\r\n    // chooses random col\r\n    const randomCol = Math.floor(Math.random() * (endCol - startCol)) + 1;\r\n    col = endCol - randomCol;\r\n    return { row, col };\r\n  };\r\n\r\n  /**\r\n   * Edits the isStart and isFinish properties of the start node and finish nodes respectively\r\n   */\r\n  setStartAndFinish = (grid, startNode, finishNode) => {\r\n    grid[startNode.row][startNode.col].isStart = true;\r\n    grid[finishNode.row][finishNode.col].isFinish = true;\r\n  };\r\n\r\n  /**\r\n   * Creates lists of walls randomly.\r\n   */\r\n  buildWalls = (grid) => {\r\n    const rows = grid.length,\r\n      cols = grid[0].length;\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        // insert algorithm here\r\n        if (Math.random() * 10 > 9) {\r\n          const currentNode = grid[i][j];\r\n          if (currentNode.isStart === true || currentNode.isFinish === true) {\r\n            continue;\r\n          }\r\n          grid[i][j].isWall = true;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid });\r\n  };\r\n\r\n  /**\r\n   * Clear all walls from the grid.\r\n   */\r\n  clearWalls = (grid) => {\r\n    const rows = grid.length,\r\n      cols = grid[0].length;\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        let currentNode = grid[i][j];\r\n        if (currentNode.isWall) {\r\n          grid[i][j].isWall = false;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid });\r\n  };\r\n\r\n  /**\r\n   * Creates a singular node object.\r\n   * row, col - coordinates of the node\r\n   */\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart: false,\r\n      isFinish: false,\r\n      isVisited: false,\r\n      distance: Infinity,\r\n      lastNode: null,\r\n      isWall: false,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * The methods handleMouseUp, handleMouseDown, handleMouseEnter control the wall inputs from the user.\r\n   * @param {*} row\r\n   * @param {*} col\r\n   */\r\n  handleMouseUp = (row, col) => {\r\n    const { grid, mouseDown, isRunning } = this.state;\r\n    if (!mouseDown || isRunning) {\r\n      return;\r\n    }\r\n\r\n    // toggle the wall property of the node\r\n    let currentNode = grid[row][col];\r\n    if (!currentNode.isStart && !currentNode.isFinish) {\r\n      currentNode.isWall = !currentNode.isWall;\r\n    }\r\n\r\n    this.setState({ mouseDown: false });\r\n  };\r\n\r\n  handleMouseEnter = (row, col) => {\r\n    const { grid, mouseDown, isRunning } = this.state;\r\n    if (!mouseDown || isRunning) {\r\n      return;\r\n    }\r\n    // toggle the wall property of the node\r\n    let currentNode = grid[row][col];\r\n    if (!currentNode.isStart && !currentNode.isFinish) {\r\n      currentNode.isWall = !currentNode.isWall;\r\n    }\r\n\r\n    this.setState({ mouseDown: true });\r\n  };\r\n\r\n  handleMouseDown = (row, col) => {\r\n    this.setState({ mouseDown: true });\r\n  };\r\n\r\n  /**\r\n   * Starts the visualisation of the algorithm that was selected from the dropdown list.\r\n   */\r\n  start = () => {\r\n    let chosenAlgorithm = this.state.algorithmTitle;\r\n\r\n    if (chosenAlgorithm === \"Breadth-first Search\") {\r\n      this.handleBFS();\r\n    } else if (chosenAlgorithm === \"Depth-first Search\") {\r\n      this.handleDFS();\r\n    } else if (chosenAlgorithm === \"Dijkstra's Algorithm\") {\r\n      this.handleDijkstra();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Changes the state of algorithmTitle when selecting an algorithm option from the dropdown list\r\n   * @param {String} name\r\n   */\r\n  chooseAlgorithm = (name) => {\r\n    this.setState({ algorithmTitle: name });\r\n  };\r\n\r\n  /**\r\n   * Shows the About modal.\r\n   */\r\n  showAbout = (isVisible) => {\r\n    this.setState({ aboutShow: isVisible });\r\n  };\r\n\r\n  /**\r\n   * Shows the Tutorial modal.\r\n   */\r\n  showTutorial = (isVisible) => {\r\n    this.setState({ tutorialShow: isVisible });\r\n  };\r\n\r\n  render() {\r\n    const { grid, aboutShow, tutorialShow } = this.state;\r\n    let width = window.innerWidth;\r\n    if (width >= WIDTH_BREAKPOINT) {\r\n      // desktop or tablet\r\n      return (\r\n        <>\r\n          <Navbar\r\n            className=\"navbar\"\r\n            sticky=\"top\"\r\n            collapseOnSelect\r\n            expand=\"lg\"\r\n            bg=\"dark\"\r\n            variant=\"dark\"\r\n          >\r\n            <Navbar.Brand href=\"#home\">\r\n              <span className=\"title\">\r\n                <span className=\"emphasis\">Pathfinder Visualiser</span> by\r\n                Martin Tiangco\r\n              </span>\r\n            </Navbar.Brand>\r\n            <Nav className=\"col-auto\">\r\n              <NavDropdown\r\n                title={this.state.algorithmTitle || \"Choose an algorithm\"}\r\n                id=\"collasible-nav-dropdown\"\r\n              >\r\n                <NavDropdown.Item\r\n                  onClick={() => this.chooseAlgorithm(\"Breadth-first Search\")}\r\n                  active={this.state.algorithmTitle === \"Breadth-first Search\"}\r\n                  href=\"#\"\r\n                >\r\n                  Breadth-first Search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item\r\n                  onClick={() => this.chooseAlgorithm(\"Depth-first Search\")}\r\n                  active={this.state.algorithmTitle === \"Depth-first Search\"}\r\n                  href=\"#\"\r\n                >\r\n                  Depth-first Search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item\r\n                  onClick={() => this.chooseAlgorithm(\"Dijkstra's Algorithm\")}\r\n                  active={this.state.algorithmTitle === \"Dijkstra's Algorithm\"}\r\n                  href=\"#\"\r\n                >\r\n                  Djikstra's Algorithm\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav>\r\n            <Nav className=\"mr-auto\">\r\n              <Button\r\n                className=\"mr-sm-2\"\r\n                variant=\"success\"\r\n                onClick={this.start}\r\n                disabled={\r\n                  this.state.isRunning || this.state.algorithmTitle === \"\"\r\n                }\r\n              >\r\n                <FiPlay /> Start visualising!\r\n              </Button>\r\n              <Button\r\n                className=\"mr-sm-2\"\r\n                variant=\"info\"\r\n                onClick={() => this.buildWalls(grid)}\r\n                disabled={this.state.isRunning}\r\n              >\r\n                <IoIosBuild /> Build Walls\r\n              </Button>\r\n              <Button\r\n                className=\"mr-sm-2\"\r\n                variant=\"info\"\r\n                onClick={() => this.clearWalls(grid)}\r\n                disabled={this.state.isRunning}\r\n              >\r\n                <MdBorderClear /> Clear Walls\r\n              </Button>\r\n              <Button\r\n                className=\"mr-sm-2\"\r\n                variant=\"info\"\r\n                onClick={this.resetNodes}\r\n                disabled={!this.state.canReset}\r\n              >\r\n                <FiRefreshCw /> Reset\r\n              </Button>\r\n            </Nav>\r\n            <Nav>\r\n              <Button\r\n                className=\"mr-sm-2\"\r\n                variant=\"info\"\r\n                onClick={() => this.showTutorial(true)}\r\n              >\r\n                <FiHelpCircle /> Tutorial\r\n              </Button>\r\n              <Button variant=\"info\" onClick={() => this.showAbout(true)}>\r\n                <FiInfo /> About\r\n              </Button>\r\n            </Nav>\r\n          </Navbar>\r\n          <TutorialModal\r\n            show={tutorialShow}\r\n            onHide={() => this.showTutorial(false)}\r\n          />\r\n          <InfoModal show={aboutShow} onHide={() => this.showAbout(false)} />\r\n          <div className=\"grid\" ref={this.grid}>\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <div className=\"column\" key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {\r\n                      row,\r\n                      col,\r\n                      isStart,\r\n                      isFinish,\r\n                      isWall,\r\n                      isVisited,\r\n                    } = node;\r\n                    const { colSize } = this.state;\r\n                    return (\r\n                      <Node\r\n                        key={rowIdx * colSize + nodeIdx}\r\n                        row={row}\r\n                        col={col}\r\n                        isStart={isStart}\r\n                        isFinish={isFinish}\r\n                        isWall={isWall}\r\n                        isVisited={isVisited}\r\n                        onMouseDown={this.handleMouseDown}\r\n                        onMouseUp={this.handleMouseUp}\r\n                        onMouseEnter={this.handleMouseEnter}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <Key />\r\n        </>\r\n      );\r\n    } else {\r\n      // Mobile render\r\n      return (\r\n        <>\r\n          <Navbar\r\n            className=\"navbar\"\r\n            sticky=\"top\"\r\n            collapseOnSelect\r\n            bg=\"dark\"\r\n            variant=\"dark\"\r\n          >\r\n            <Nav className=\"mr-auto\">\r\n              <Button\r\n                className=\"mr-2\"\r\n                variant=\"info\"\r\n                onClick={() => this.buildWalls(grid)}\r\n                disabled={this.state.isRunning}\r\n              >\r\n                <IoIosBuild />\r\n              </Button>\r\n              <Button\r\n                className=\"mr-2\"\r\n                variant=\"info\"\r\n                onClick={() => this.clearWalls(grid)}\r\n                disabled={this.state.isRunning}\r\n              >\r\n                <MdBorderClear />\r\n              </Button>\r\n              <Button\r\n                className=\"mr-2\"\r\n                variant=\"info\"\r\n                onClick={this.resetNodes}\r\n                disabled={!this.state.canReset}\r\n              >\r\n                <FiRefreshCw />\r\n              </Button>\r\n            </Nav>\r\n\r\n            <Nav>\r\n              <NavDropdown\r\n                title={this.state.algorithmTitle || \"Choose an algorithm\"}\r\n                id=\"nav-dropdown\"\r\n              >\r\n                <NavDropdown.Item\r\n                  onClick={() => this.chooseAlgorithm(\"Breadth-first Search\")}\r\n                  active={this.state.algorithmTitle === \"Breadth-first Search\"}\r\n                  href=\"#\"\r\n                >\r\n                  Breadth-first Search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item\r\n                  onClick={() => this.chooseAlgorithm(\"Depth-first Search\")}\r\n                  active={this.state.algorithmTitle === \"Depth-first Search\"}\r\n                  href=\"#\"\r\n                >\r\n                  Depth-first Search\r\n                </NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item\r\n                  onClick={() => this.chooseAlgorithm(\"Dijkstra's Algorithm\")}\r\n                  active={this.state.algorithmTitle === \"Dijkstra's Algorithm\"}\r\n                  href=\"#\"\r\n                >\r\n                  Djikstra's Algorithm\r\n                </NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav>\r\n          </Navbar>\r\n          <div className=\"grid\" ref={this.grid}>\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <div className=\"column\" key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {\r\n                      row,\r\n                      col,\r\n                      isStart,\r\n                      isFinish,\r\n                      isWall,\r\n                      isVisited,\r\n                    } = node;\r\n                    const { colSize } = this.state;\r\n                    return (\r\n                      <Node\r\n                        key={rowIdx * colSize + nodeIdx}\r\n                        row={row}\r\n                        col={col}\r\n                        isStart={isStart}\r\n                        isFinish={isFinish}\r\n                        isWall={isWall}\r\n                        isVisited={isVisited}\r\n                        onMouseDown={this.handleMouseDown}\r\n                        onMouseUp={this.handleMouseUp}\r\n                        onMouseEnter={this.handleMouseEnter}\r\n                      />\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <Nav className=\"justify-content-center\">\r\n            <Button\r\n              variant=\"success\"\r\n              onClick={this.start}\r\n              disabled={\r\n                this.state.isRunning || this.state.algorithmTitle === \"\"\r\n              }\r\n            >\r\n              <FiPlay /> Start visualising!\r\n            </Button>\r\n          </Nav>\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default withGetScreen(Grid);\r\n","import { collectAllNodes, sortByDistance, updateUnvisited } from \"./Helpers\";\r\n\r\n/*\r\n * Returns a list of visited nodes with least cost by using the Dijkstra's algorithm.\r\n */\r\nexport function Dijkstra(startNode, finishNode, grid) {\r\n  let visitedNodes = [startNode];\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = collectAllNodes(grid);\r\n  while (unvisitedNodes.length > 0) {\r\n    sortByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift(); // removes the first element of unvisitedNodes\r\n\r\n    // if closestNode is a wall, we continue because we can't do anything about it\r\n    if (closestNode.isWall) continue;\r\n\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === finishNode) break;\r\n    updateUnvisited(closestNode, grid);\r\n  }\r\n  return visitedNodes;\r\n}\r\n","import { collectAllNodes, sortByDistance, updateUnvisited } from \"./Helpers\";\r\n\r\n/*\r\n * Returns a list of visited nodes with least cost by using the Dijkstra's algorithm.\r\n */\r\nexport function BFS(startNode, finishNode, grid) {\r\n  let visitedNodes = [startNode];\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = collectAllNodes(grid);\r\n  while (unvisitedNodes.length > 0) {\r\n    sortByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift(); // removes the first element of unvisitedNodes\r\n\r\n    // if closestNode is a wall, we continue because we can't do anything about it\r\n    if (closestNode.isWall) continue;\r\n\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n    if (closestNode === finishNode) break;\r\n    updateUnvisited(closestNode, grid);\r\n  }\r\n  return visitedNodes;\r\n}\r\n","import { updateUnvisited, getUnvisitedNeighbours } from \"./Helpers\";\r\n\r\n/*\r\n * Returns a list of visited nodes.\r\n */\r\nexport function DFS(startNode, finishNode, grid) {\r\n  let visitedNodes = [];\r\n  let unvisitedNodes = [startNode];\r\n  startNode.distance = 0;\r\n\r\n  let currentNode;\r\n  while (unvisitedNodes.length > 0) {\r\n    // remove the top of the stack, and work with this node for the current iteration\r\n    currentNode = unvisitedNodes.pop();\r\n\r\n    // skip if the node is a wall\r\n    if (currentNode.isWall) continue;\r\n\r\n    currentNode.isVisited = true;\r\n    visitedNodes.push(currentNode);\r\n\r\n    // found the finish, can exit loop\r\n    if (currentNode === finishNode) break;\r\n\r\n    // find its unvisited neighbours and update the distance and lastVisited properties of the neighbours\r\n    let neighbourNodes = getUnvisitedNeighbours(currentNode, grid);\r\n    updateUnvisited(currentNode, grid);\r\n\r\n    // put the unvisited neighbours into the stack\r\n    unvisitedNodes = unvisitedNodes.concat(neighbourNodes);\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grid from \"./components/Grid\";\r\n\r\nexport default class PathfinderVisualiser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return <Grid></Grid>;\r\n  }\r\n}\r\n","import React from \"react\";\nimport PathfinderVisualiser from \"./PathfinderVisualiser/PathfinderVisualiser\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfinderVisualiser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}